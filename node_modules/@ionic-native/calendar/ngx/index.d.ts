import { IonicNativePlugin } from '@ionic-native/core';
import * as Éµngcc0 from '@angular/core';
export interface CalendarOptions {
    /**
     * Id
     */
    id?: string;
    /**
     *
     */
    firstReminderMinutes?: number;
    /**
     *
     */
    secondReminderMinutes?: number;
    /**
     * Recurrence. Can be set to `daily`, `weekly`, `monthly` or `yearly`
     */
    recurrence?: string;
    /**
     * Recurrence interval. Valid only when `recurrence` option is set.
     */
    recurrenceInterval?: number;
    /**
     * Recurrence end date. Valid only when `recurrence` option is set.
     */
    recurrenceEndDate?: Date;
    /**
     * Calendar name. Ths is supported by `iOS` only.
     */
    calendarName?: string;
    /**
     * Calendar id
     */
    calendarId?: number;
    /**
     * URL
     */
    url?: string;
}
export interface NameOrOptions {
    /** Calendar name */
    calendarName?: string;
    /** Calendar color as a HEX string */
    calendarColor?: string;
}
/**
 * @name Calendar
 * @premier calendar
 * @description
 * This plugin allows you to add events to the Calendar of the mobile device.
 *
 * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).
 *
 *
 * @usage
 * ```typescript
 * import { Calendar } from '@ionic-native/calendar/ngx';
 *
 * constructor(private calendar: Calendar) { }
 *
 *
 * this.calendar.createCalendar('MyCalendar').then(
 *   (msg) => { console.log(msg); },
 *   (err) => { console.log(err); }
 * );
 * ```
 * @interfaces
 * CalendarOptions
 * NameOrOptions
 */
export declare class Calendar extends IonicNativePlugin {
    /**
     * This function checks if we have permission to read/write from/to the calendar.
     * The promise will resolve with `true` when:
     * - You're running on iOS, or
     * - You're targeting API level lower than 23, or
     * - You're using Android < 6, or
     * - You've already granted permission
     *
     * If this returns false, you should call the `requestReadWritePermission` function
     * @returns {Promise<boolean>}
     */
    hasReadWritePermission(): Promise<boolean>;
    /**
     * Check if we have read permission
     * @returns {Promise<boolean>}
     */
    hasReadPermission(): Promise<boolean>;
    /**
     * Check if we have write permission
     * @returns {Promise<boolean>}
     */
    hasWritePermission(): Promise<boolean>;
    /**
     * Request write permission
     * @returns {Promise<any>}
     */
    requestWritePermission(): Promise<any>;
    /**
     * Request read permission
     * @returns {Promise<any>}
     */
    requestReadPermission(): Promise<any>;
    /**
     * Requests read/write permissions
     * @returns {Promise<any>}
     */
    requestReadWritePermission(): Promise<any>;
    /**
     * Create a calendar. (iOS only)
     *
     * @param {string | NameOrOptions} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string
     * @returns {Promise<any>} Returns a Promise
     */
    createCalendar(nameOrOptions: string | NameOrOptions): Promise<any>;
    /**
     * Delete a calendar. (iOS only)
     * @param {string} name  Name of the calendar to delete.
     * @returns {Promise<any>} Returns a Promise
     */
    deleteCalendar(name: string): Promise<any>;
    /**
     * Returns the default calendar options.
     *
     * @return {CalendarOptions} Returns an object with the default calendar options
     */
    getCalendarOptions(): CalendarOptions;
    /**
     * Returns options for a custom calender with specific color
     *
     * @return {NameOrOptions} Returns an object with the default options
     */
    getCreateCalendarOptions(): NameOrOptions;
    /**
     * Silently create an event.
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @returns {Promise<any>} Returns a Promise
     */
    createEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;
    /**
     * Silently create an event with additional options.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @returns {Promise<any>} Returns a Promise
     */
    createEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any>;
    /**
     * Interactively create an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @returns {Promise<any>} Returns a Promise
     */
    createEventInteractively(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;
    /**
     * Interactively create an event with additional options.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @returns {Promise<any>}
     */
    createEventInteractivelyWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any>;
    /**
     * Find an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @returns {Promise<any>}
     */
    findEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;
    /**
     * Find an event with additional options.
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
     * @returns {Promise<any>} Returns a Promise that resolves with the event, or rejects with an error.
     */
    findEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, options?: CalendarOptions): Promise<any>;
    /**
     * Find a list of events within the specified date range. (Android only)
     *
     * @param {Date} [startDate]  The start date
     * @param {Date} [endDate]  The end date
     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.
     */
    listEventsInRange(startDate: Date, endDate: Date): Promise<any>;
    /**
     * Get a list of all calendars.
     * @returns {Promise<any>} A Promise that resolves with the list of calendars, or rejects with an error.
     */
    listCalendars(): Promise<any>;
    /**
     * Get a list of all future events in the specified calendar. (iOS only)
     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.
     */
    findAllEventsInNamedCalendar(calendarName: string): Promise<any>;
    /**
     * Modify an event. (iOS only)
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {string} [newTitle]  The new event title
     * @param {string} [newLocation]  The new event location
     * @param {string} [newNotes]  The new event notes
     * @param {Date} [newStartDate]  The new event start date
     * @param {Date} [newEndDate]  The new event end date
     * @return Returns a Promise
     */
    modifyEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, newTitle?: string, newLocation?: string, newNotes?: string, newStartDate?: Date, newEndDate?: Date): Promise<any>;
    /**
     * Modify an event with additional options. (iOS only)
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {string} [newTitle]  The new event title
     * @param {string} [newLocation]  The new event location
     * @param {string} [newNotes]  The new event notes
     * @param {Date} [newStartDate]  The new event start date
     * @param {Date} [newEndDate]  The new event end date
     * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`
     * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`
     * @return Returns a Promise
     */
    modifyEventWithOptions(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, newTitle?: string, newLocation?: string, newNotes?: string, newStartDate?: Date, newEndDate?: Date, filterOptions?: CalendarOptions, newOptions?: CalendarOptions): Promise<any>;
    /**
     * Delete an event.
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @return Returns a Promise
     */
    deleteEvent(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date): Promise<any>;
    /**
     * Delete an event from the specified Calendar. (iOS only)
     *
     * @param {string} [title]  The event title
     * @param {string} [location]  The event location
     * @param {string} [notes]  The event notes
     * @param {Date} [startDate]  The event start date
     * @param {Date} [endDate]  The event end date
     * @param {string} calendarName
     * @return Returns a Promise
     */
    deleteEventFromNamedCalendar(title?: string, location?: string, notes?: string, startDate?: Date, endDate?: Date, calendarName?: string): Promise<any>;
    /**
     * Delete an event by id.
     *
     * @param {string} [id]  The event id
     * @param {Date} [fromDate]  The date where it start deleting from
     * @return Returns a Promise
     */
    deleteEventById(id: string, fromDate?: Date): Promise<any>;
    /**
     * Open the calendar at the specified date.
     * @param {Date} date The date you want to open the calendar on
     * @return {Promise<any>} Promise returns a promise
     */
    openCalendar(date: Date): Promise<any>;
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<Calendar, never>;
    static Éµprov: Éµngcc0.ÉµÉµInjectableDef<Calendar>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnU0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogSWRcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGZpcnN0UmVtaW5kZXJNaW51dGVzPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgc2Vjb25kUmVtaW5kZXJNaW51dGVzPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFJlY3VycmVuY2UuIENhbiBiZSBzZXQgdG8gYGRhaWx5YCwgYHdlZWtseWAsIGBtb250aGx5YCBvciBgeWVhcmx5YFxuICAgICAqL1xuICAgIHJlY3VycmVuY2U/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmVjdXJyZW5jZSBpbnRlcnZhbC4gVmFsaWQgb25seSB3aGVuIGByZWN1cnJlbmNlYCBvcHRpb24gaXMgc2V0LlxuICAgICAqL1xuICAgIHJlY3VycmVuY2VJbnRlcnZhbD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZWN1cnJlbmNlIGVuZCBkYXRlLiBWYWxpZCBvbmx5IHdoZW4gYHJlY3VycmVuY2VgIG9wdGlvbiBpcyBzZXQuXG4gICAgICovXG4gICAgcmVjdXJyZW5jZUVuZERhdGU/OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIENhbGVuZGFyIG5hbWUuIFRocyBpcyBzdXBwb3J0ZWQgYnkgYGlPU2Agb25seS5cbiAgICAgKi9cbiAgICBjYWxlbmRhck5hbWU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2FsZW5kYXIgaWRcbiAgICAgKi9cbiAgICBjYWxlbmRhcklkPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFVSTFxuICAgICAqL1xuICAgIHVybD86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTmFtZU9yT3B0aW9ucyB7XG4gICAgLyoqIENhbGVuZGFyIG5hbWUgKi9cbiAgICBjYWxlbmRhck5hbWU/OiBzdHJpbmc7XG4gICAgLyoqIENhbGVuZGFyIGNvbG9yIGFzIGEgSEVYIHN0cmluZyAqL1xuICAgIGNhbGVuZGFyQ29sb3I/OiBzdHJpbmc7XG59XG4vKipcbiAqIEBuYW1lIENhbGVuZGFyXG4gKiBAcHJlbWllciBjYWxlbmRhclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIGFkZCBldmVudHMgdG8gdGhlIENhbGVuZGFyIG9mIHRoZSBtb2JpbGUgZGV2aWNlLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tY2FsZW5kYXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQ2FsZW5kYXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9DYWxlbmRhci1QaG9uZUdhcC1QbHVnaW4pLlxuICpcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENhbGVuZGFyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jYWxlbmRhci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FsZW5kYXI6IENhbGVuZGFyKSB7IH1cbiAqXG4gKlxuICogdGhpcy5jYWxlbmRhci5jcmVhdGVDYWxlbmRhcignTXlDYWxlbmRhcicpLnRoZW4oXG4gKiAgIChtc2cpID0+IHsgY29uc29sZS5sb2cobXNnKTsgfSxcbiAqICAgKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpOyB9XG4gKiApO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQ2FsZW5kYXJPcHRpb25zXG4gKiBOYW1lT3JPcHRpb25zXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhbGVuZGFyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIHdlIGhhdmUgcGVybWlzc2lvbiB0byByZWFkL3dyaXRlIGZyb20vdG8gdGhlIGNhbGVuZGFyLlxuICAgICAqIFRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSB3aXRoIGB0cnVlYCB3aGVuOlxuICAgICAqIC0gWW91J3JlIHJ1bm5pbmcgb24gaU9TLCBvclxuICAgICAqIC0gWW91J3JlIHRhcmdldGluZyBBUEkgbGV2ZWwgbG93ZXIgdGhhbiAyMywgb3JcbiAgICAgKiAtIFlvdSdyZSB1c2luZyBBbmRyb2lkIDwgNiwgb3JcbiAgICAgKiAtIFlvdSd2ZSBhbHJlYWR5IGdyYW50ZWQgcGVybWlzc2lvblxuICAgICAqXG4gICAgICogSWYgdGhpcyByZXR1cm5zIGZhbHNlLCB5b3Ugc2hvdWxkIGNhbGwgdGhlIGByZXF1ZXN0UmVhZFdyaXRlUGVybWlzc2lvbmAgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICAgKi9cbiAgICBoYXNSZWFkV3JpdGVQZXJtaXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgd2UgaGF2ZSByZWFkIHBlcm1pc3Npb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICAgKi9cbiAgICBoYXNSZWFkUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHdlIGhhdmUgd3JpdGUgcGVybWlzc2lvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGhhc1dyaXRlUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3Qgd3JpdGUgcGVybWlzc2lvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcmVxdWVzdFdyaXRlUGVybWlzc2lvbigpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCByZWFkIHBlcm1pc3Npb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHJlcXVlc3RSZWFkUGVybWlzc2lvbigpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgcmVhZC93cml0ZSBwZXJtaXNzaW9uc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcmVxdWVzdFJlYWRXcml0ZVBlcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNhbGVuZGFyLiAoaU9TIG9ubHkpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IE5hbWVPck9wdGlvbnN9IG5hbWVPck9wdGlvbnMgIGVpdGhlciBhIHN0cmluZyBuYW1lIG9yIGEgb3B0aW9ucyBvYmplY3QuIElmIHN0cmluZywgcHJvdmlkZSB0aGUgY2FsZW5kYXIgbmFtZS4gSUYgYW4gb2JqZWN0LCBwcm92aWRlIGEgY2FsZW5kYXIgbmFtZSBhcyBhIHN0cmluZyBhbmQgYSBjYWxlbmRhciBjb2xvciBpbiBoZXggZm9ybWF0IGFzIGEgc3RyaW5nXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2VcbiAgICAgKi9cbiAgICBjcmVhdGVDYWxlbmRhcihuYW1lT3JPcHRpb25zOiBzdHJpbmcgfCBOYW1lT3JPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGNhbGVuZGFyLiAoaU9TIG9ubHkpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgIE5hbWUgb2YgdGhlIGNhbGVuZGFyIHRvIGRlbGV0ZS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIGRlbGV0ZUNhbGVuZGFyKG5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGNhbGVuZGFyIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtDYWxlbmRhck9wdGlvbnN9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGRlZmF1bHQgY2FsZW5kYXIgb3B0aW9uc1xuICAgICAqL1xuICAgIGdldENhbGVuZGFyT3B0aW9ucygpOiBDYWxlbmRhck9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvcHRpb25zIGZvciBhIGN1c3RvbSBjYWxlbmRlciB3aXRoIHNwZWNpZmljIGNvbG9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOYW1lT3JPcHRpb25zfSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBkZWZhdWx0IG9wdGlvbnNcbiAgICAgKi9cbiAgICBnZXRDcmVhdGVDYWxlbmRhck9wdGlvbnMoKTogTmFtZU9yT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBTaWxlbnRseSBjcmVhdGUgYW4gZXZlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXG4gICAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2VcbiAgICAgKi9cbiAgICBjcmVhdGVFdmVudCh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBTaWxlbnRseSBjcmVhdGUgYW4gZXZlbnQgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcbiAgICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxuICAgICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcbiAgICAgKiBAcGFyYW0ge0NhbGVuZGFyT3B0aW9uc30gW29wdGlvbnNdICBBZGRpdGlvbmFsIG9wdGlvbnMsIHNlZSBgZ2V0Q2FsZW5kYXJPcHRpb25zYFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlXG4gICAgICovXG4gICAgY3JlYXRlRXZlbnRXaXRoT3B0aW9ucyh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSwgb3B0aW9ucz86IENhbGVuZGFyT3B0aW9ucyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBJbnRlcmFjdGl2ZWx5IGNyZWF0ZSBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdICBUaGUgZXZlbnQgdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2F0aW9uXSAgVGhlIGV2ZW50IGxvY2F0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtub3Rlc10gIFRoZSBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBldmVudCBzdGFydCBkYXRlXG4gICAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBldmVudCBlbmQgZGF0ZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlXG4gICAgICovXG4gICAgY3JlYXRlRXZlbnRJbnRlcmFjdGl2ZWx5KHRpdGxlPzogc3RyaW5nLCBsb2NhdGlvbj86IHN0cmluZywgbm90ZXM/OiBzdHJpbmcsIHN0YXJ0RGF0ZT86IERhdGUsIGVuZERhdGU/OiBEYXRlKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEludGVyYWN0aXZlbHkgY3JlYXRlIGFuIGV2ZW50IHdpdGggYWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gIFRoZSBldmVudCB0aXRsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYXRpb25dICBUaGUgZXZlbnQgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVzXSAgVGhlIGV2ZW50IG5vdGVzXG4gICAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIGV2ZW50IHN0YXJ0IGRhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGV2ZW50IGVuZCBkYXRlXG4gICAgICogQHBhcmFtIHtDYWxlbmRhck9wdGlvbnN9IFtvcHRpb25zXSAgQWRkaXRpb25hbCBvcHRpb25zLCBzZWUgYGdldENhbGVuZGFyT3B0aW9uc2BcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGNyZWF0ZUV2ZW50SW50ZXJhY3RpdmVseVdpdGhPcHRpb25zKHRpdGxlPzogc3RyaW5nLCBsb2NhdGlvbj86IHN0cmluZywgbm90ZXM/OiBzdHJpbmcsIHN0YXJ0RGF0ZT86IERhdGUsIGVuZERhdGU/OiBEYXRlLCBvcHRpb25zPzogQ2FsZW5kYXJPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZpbmQgYW4gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcbiAgICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxuICAgICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGZpbmRFdmVudCh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBGaW5kIGFuIGV2ZW50IHdpdGggYWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdICBUaGUgZXZlbnQgdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2F0aW9uXSAgVGhlIGV2ZW50IGxvY2F0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtub3Rlc10gIFRoZSBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBldmVudCBzdGFydCBkYXRlXG4gICAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBldmVudCBlbmQgZGF0ZVxuICAgICAqIEBwYXJhbSB7Q2FsZW5kYXJPcHRpb25zfSBbb3B0aW9uc10gIEFkZGl0aW9uYWwgb3B0aW9ucywgc2VlIGBnZXRDYWxlbmRhck9wdGlvbnNgXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBldmVudCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGZpbmRFdmVudFdpdGhPcHRpb25zKHRpdGxlPzogc3RyaW5nLCBsb2NhdGlvbj86IHN0cmluZywgbm90ZXM/OiBzdHJpbmcsIHN0YXJ0RGF0ZT86IERhdGUsIGVuZERhdGU/OiBEYXRlLCBvcHRpb25zPzogQ2FsZW5kYXJPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZpbmQgYSBsaXN0IG9mIGV2ZW50cyB3aXRoaW4gdGhlIHNwZWNpZmllZCBkYXRlIHJhbmdlLiAoQW5kcm9pZCBvbmx5KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtEYXRlfSBbc3RhcnREYXRlXSAgVGhlIHN0YXJ0IGRhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGV9IFtlbmREYXRlXSAgVGhlIGVuZCBkYXRlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBsaXN0IG9mIGV2ZW50cywgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGxpc3RFdmVudHNJblJhbmdlKHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBsaXN0IG9mIGFsbCBjYWxlbmRhcnMuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbGlzdCBvZiBjYWxlbmRhcnMsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBsaXN0Q2FsZW5kYXJzKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBsaXN0IG9mIGFsbCBmdXR1cmUgZXZlbnRzIGluIHRoZSBzcGVjaWZpZWQgY2FsZW5kYXIuIChpT1Mgb25seSlcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGxpc3Qgb2YgZXZlbnRzLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAgICovXG4gICAgZmluZEFsbEV2ZW50c0luTmFtZWRDYWxlbmRhcihjYWxlbmRhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBNb2RpZnkgYW4gZXZlbnQuIChpT1Mgb25seSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdICBUaGUgZXZlbnQgdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2F0aW9uXSAgVGhlIGV2ZW50IGxvY2F0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtub3Rlc10gIFRoZSBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBldmVudCBzdGFydCBkYXRlXG4gICAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBldmVudCBlbmQgZGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmV3VGl0bGVdICBUaGUgbmV3IGV2ZW50IHRpdGxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuZXdMb2NhdGlvbl0gIFRoZSBuZXcgZXZlbnQgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25ld05vdGVzXSAgVGhlIG5ldyBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW25ld1N0YXJ0RGF0ZV0gIFRoZSBuZXcgZXZlbnQgc3RhcnQgZGF0ZVxuICAgICAqIEBwYXJhbSB7RGF0ZX0gW25ld0VuZERhdGVdICBUaGUgbmV3IGV2ZW50IGVuZCBkYXRlXG4gICAgICogQHJldHVybiBSZXR1cm5zIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIG1vZGlmeUV2ZW50KHRpdGxlPzogc3RyaW5nLCBsb2NhdGlvbj86IHN0cmluZywgbm90ZXM/OiBzdHJpbmcsIHN0YXJ0RGF0ZT86IERhdGUsIGVuZERhdGU/OiBEYXRlLCBuZXdUaXRsZT86IHN0cmluZywgbmV3TG9jYXRpb24/OiBzdHJpbmcsIG5ld05vdGVzPzogc3RyaW5nLCBuZXdTdGFydERhdGU/OiBEYXRlLCBuZXdFbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBNb2RpZnkgYW4gZXZlbnQgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMuIChpT1Mgb25seSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdICBUaGUgZXZlbnQgdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2F0aW9uXSAgVGhlIGV2ZW50IGxvY2F0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtub3Rlc10gIFRoZSBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBldmVudCBzdGFydCBkYXRlXG4gICAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBldmVudCBlbmQgZGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmV3VGl0bGVdICBUaGUgbmV3IGV2ZW50IHRpdGxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuZXdMb2NhdGlvbl0gIFRoZSBuZXcgZXZlbnQgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25ld05vdGVzXSAgVGhlIG5ldyBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW25ld1N0YXJ0RGF0ZV0gIFRoZSBuZXcgZXZlbnQgc3RhcnQgZGF0ZVxuICAgICAqIEBwYXJhbSB7RGF0ZX0gW25ld0VuZERhdGVdICBUaGUgbmV3IGV2ZW50IGVuZCBkYXRlXG4gICAgICogQHBhcmFtIHtDYWxlbmRhck9wdGlvbnN9IFtmaWx0ZXJPcHRpb25zXSBFdmVudCBPcHRpb25zLCBzZWUgYGdldENhbGVuZGFyT3B0aW9uc2BcbiAgICAgKiBAcGFyYW0ge0NhbGVuZGFyT3B0aW9uc30gW25ld09wdGlvbnNdICBOZXcgZXZlbnQgb3B0aW9ucywgc2VlIGBnZXRDYWxlbmRhck9wdGlvbnNgXG4gICAgICogQHJldHVybiBSZXR1cm5zIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIG1vZGlmeUV2ZW50V2l0aE9wdGlvbnModGl0bGU/OiBzdHJpbmcsIGxvY2F0aW9uPzogc3RyaW5nLCBub3Rlcz86IHN0cmluZywgc3RhcnREYXRlPzogRGF0ZSwgZW5kRGF0ZT86IERhdGUsIG5ld1RpdGxlPzogc3RyaW5nLCBuZXdMb2NhdGlvbj86IHN0cmluZywgbmV3Tm90ZXM/OiBzdHJpbmcsIG5ld1N0YXJ0RGF0ZT86IERhdGUsIG5ld0VuZERhdGU/OiBEYXRlLCBmaWx0ZXJPcHRpb25zPzogQ2FsZW5kYXJPcHRpb25zLCBuZXdPcHRpb25zPzogQ2FsZW5kYXJPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdICBUaGUgZXZlbnQgdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2F0aW9uXSAgVGhlIGV2ZW50IGxvY2F0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtub3Rlc10gIFRoZSBldmVudCBub3Rlc1xuICAgICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gIFRoZSBldmVudCBzdGFydCBkYXRlXG4gICAgICogQHBhcmFtIHtEYXRlfSBbZW5kRGF0ZV0gIFRoZSBldmVudCBlbmQgZGF0ZVxuICAgICAqIEByZXR1cm4gUmV0dXJucyBhIFByb21pc2VcbiAgICAgKi9cbiAgICBkZWxldGVFdmVudCh0aXRsZT86IHN0cmluZywgbG9jYXRpb24/OiBzdHJpbmcsIG5vdGVzPzogc3RyaW5nLCBzdGFydERhdGU/OiBEYXRlLCBlbmREYXRlPzogRGF0ZSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZXZlbnQgZnJvbSB0aGUgc3BlY2lmaWVkIENhbGVuZGFyLiAoaU9TIG9ubHkpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSAgVGhlIGV2ZW50IHRpdGxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gIFRoZSBldmVudCBsb2NhdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbm90ZXNdICBUaGUgZXZlbnQgbm90ZXNcbiAgICAgKiBAcGFyYW0ge0RhdGV9IFtzdGFydERhdGVdICBUaGUgZXZlbnQgc3RhcnQgZGF0ZVxuICAgICAqIEBwYXJhbSB7RGF0ZX0gW2VuZERhdGVdICBUaGUgZXZlbnQgZW5kIGRhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsZW5kYXJOYW1lXG4gICAgICogQHJldHVybiBSZXR1cm5zIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIGRlbGV0ZUV2ZW50RnJvbU5hbWVkQ2FsZW5kYXIodGl0bGU/OiBzdHJpbmcsIGxvY2F0aW9uPzogc3RyaW5nLCBub3Rlcz86IHN0cmluZywgc3RhcnREYXRlPzogRGF0ZSwgZW5kRGF0ZT86IERhdGUsIGNhbGVuZGFyTmFtZT86IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZXZlbnQgYnkgaWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2lkXSAgVGhlIGV2ZW50IGlkXG4gICAgICogQHBhcmFtIHtEYXRlfSBbZnJvbURhdGVdICBUaGUgZGF0ZSB3aGVyZSBpdCBzdGFydCBkZWxldGluZyBmcm9tXG4gICAgICogQHJldHVybiBSZXR1cm5zIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIGRlbGV0ZUV2ZW50QnlJZChpZDogc3RyaW5nLCBmcm9tRGF0ZT86IERhdGUpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgY2FsZW5kYXIgYXQgdGhlIHNwZWNpZmllZCBkYXRlLlxuICAgICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSBUaGUgZGF0ZSB5b3Ugd2FudCB0byBvcGVuIHRoZSBjYWxlbmRhciBvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUHJvbWlzZSByZXR1cm5zIGEgcHJvbWlzZVxuICAgICAqL1xuICAgIG9wZW5DYWxlbmRhcihkYXRlOiBEYXRlKTogUHJvbWlzZTxhbnk+O1xufVxuIl19